# 1. Реализовать функцию, принимающую два числа (позиционные аргументы) и выполняющую их деление.
# Числа запрашивать у пользователя, предусмотреть обработку ситуации деления на ноль.

# def task_1_func (num_1, num_2):
#     try:
#         print("%.2f" % (float(num_1) / float(num_2)))
#     except ZeroDivisionError:
#         print('Деление на ноль!')
#     except ValueError:
#         print('Введите число!')
#
#
#
# a, b = input("Введите 2 числа через запятую, программа их поделит: \n").split(',')
# task_1_func(num_1=a, num_2=b)

#----------------------------------------------------------------------------------------
# 2. Реализовать функцию, принимающую несколько параметров, описывающих данные пользователя:
# имя, фамилия, год рождения, город проживания, email, телефон.
# Функция должна принимать параметры как именованные аргументы. Реализовать вывод данных о пользователе одной строкой.

# def task_2_func (name, last_name, birthday, adress, email, phone):
#     print(name, last_name, birthday, adress, email, phone)
#
#
# task_2_func('Гоша', 'Пластинин', '1995', 'Москва', 'Почта', '+7(123)456-78-90')
#----------------------------------------------------------------------------------------

# 3.Реализовать функцию my_func(),
# которая принимает три позиционных аргумента, и возвращает сумму наибольших двух аргументов.

# number_1, number_2, number_3 = input("Введите 3 числа через запятую: \n").split(',')
#
# def my_func(number_1, number_2, number_3):
#     int_list = sorted([number_1, number_2, number_3])
#     int_list.reverse()
#     return int_list[0:2]
#
#
# try:
#     print(my_func(number_1=int(number_1), number_2=int(number_2), number_3=int(number_3)))
# except ValueError:
#     print('Введи целое число!')

#----------------------------------------------------------------------------------------

# 4. Программа принимает действительное положительное число x и целое отрицательное число y.
# Необходимо выполнить возведение числа x в степень y. Задание необходимо реализовать в виде функции my_func(x, y).
# При решении задания необходимо обойтись без встроенной функции возведения числа в степень.
# Подсказка: попробуйте решить задачу двумя способами.
# Первый — возведение в степень с помощью оператора **.
# Второй — более сложная реализация без оператора **, предусматривающая использование цикла.

# Опять же, зачем вставлять циклы туда, где они не нужны. Код должен быть красивым и лаконичным!

# def my_func_2(x, y):
#     return round((x ** y), 5)
#
#
# def my_func_2_2(x, y):
#     if y == 0:
#         return 1
#     else:
#         return round(1/x * my_func_2_2(x, y + 1), 5)
#
#
# try:
#     x = abs(float(input("Введите действительное положительно число: \n")))
#     y = int(input("Введите целое отрицательное число: \n"))
#     if y > 0:
#         y = -y
#     print(my_func_2(x=x, y=y))
#     print(my_func_2_2(x=x, y=y))
#
# except:
#     print("Введите действительное положительно число для перовго числа и целое отрицательное для второго числа!")


#----------------------------------------------------------------------------------------
# 5. Программа запрашивает у пользователя строку чисел, разделенных пробелом.
# При нажатии Enter должна выводиться сумма чисел.
# Пользователь может продолжить ввод чисел, разделенных пробелом и снова нажать Enter.
# Сумма вновь введенных чисел будет добавляться к уже подсчитанной сумме.
# Но если вместо числа вводится специальный символ, выполнение программы завершается.
# Если специальный символ введен после нескольких чисел,
# то вначале нужно добавить сумму этих чисел к полученной ранее сумме и после этого завершить программу.

# global_sum = 0
#
# def num_sum(*args):
#     s_list = []
#     for elem in args[0]:
#         try:
#             s_list.append(int(elem))
#         except ValueError:
#             break
#     return sum(s_list)
#
#
# while True:
#     user_input = input('Введите числа через проблел, либо нажмите @, что выйти: \n').split(' ')
#     if user_input[0] == "@":
#         print(global_sum)
#         break
#     elif "@" in user_input:
#         global_sum += num_sum(user_input)
#         print(global_sum)
#         break
#     global_sum += num_sum(user_input)
#     print(global_sum)


#----------------------------------------------------------------------------------------
# 6. Реализовать функцию int_func(), принимающую слово из маленьких латинских букв и возвращающую его же, но с прописной первой буквой.
# Например, print(int_func(‘text’)) -> Text.
# Продолжить работу над заданием. В программу должна попадать строка из слов, разделенных пробелом.
# Каждое слово состоит из латинских букв в нижнем регистре. Сделать вывод исходной строки, но каждое слово должно начинаться с заглавной буквы.
# Необходимо использовать написанную ранее функцию int_func().

# def int_func(text):
#     return text.title() #одно слово
#
# word_text = []
# text = input('Введите текст (разделитель - пробел): \n').split()
# for elem in text:
#     word = int_func(elem)
#     word_text.append(word)
#
# print(" ".join(word_text))
