#Я знаю, что импорт модулей должен быть в начале "полотна", но я специально их указал в начале каждого задания,
#чтобы было понятно, что используется в конкретном случае

"""Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
В расчете необходимо использовать формулу: (выработка в часах*ставка в час) + премия.
Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами."""

from sys import argv

script_name, deal, price_in_hour, bonus = argv

def income(deal, price_in_hour, bonus):
    print(int(deal) * int(price_in_hour) + int(bonus))

income(deal=deal, price_in_hour=price_in_hour, bonus=bonus)

"""Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123].
"""

original_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]

new_list = [elem for num, elem in enumerate(original_list) if elem > original_list[num - 1] and num != 0]
print(new_list)


"""Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
Подсказка: использовать функцию range() и генератор."""

multiples = [elem for elem in range(20, 241) if elem % 20 == 0 or elem % 21 == 0]
print(multiples)

"""Представлен список чисел. Определить элементы списка, не имеющие повторений. 
Сформировать итоговый массив чисел, соответствующих требованию. 
Элементы вывести в порядке их следования в исходном списке. 
Для выполнения задания обязательно использовать генератор.
Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]
"""

from collections import OrderedDict

original_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
new_list = list(OrderedDict.fromkeys(original_list))
for num, elem in enumerate(new_list):
    repeat = original_list.count(elem)
    if repeat > 1:
        new_list.pop(num)
print(new_list)

"""Реализовать формирование списка, используя функцию range() и возможности генератора. 
В список должны войти четные числа от 100 до 1000 (включая границы). 
Необходимо получить результат вычисления произведения всех элементов списка.
Подсказка: использовать функцию reduce()"""

from functools import reduce

ordinal_list = [elem for elem in range(100, 1001, 2)]


def produce(prev_elem, elem):
    return prev_elem * elem


print(reduce(produce, ordinal_list))

"""Реализовать два небольших скрипта: 
а) итератор, генерирующий целые числа, начиная с указанного, 
б) итератор, повторяющий элементы некоторого списка, определенного заранее.
Подсказка: использовать функцию count() и cycle() модуля itertools. 
Обратите внимание, что создаваемый цикл не должен быть бесконечным. Необходимо предусмотреть условие его завершения. 
Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл. 
Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.
"""

from itertools import count, cycle

def first_iter(): # определяем список зарание
    original_list = []
    for elem in count(3):
        if elem > 10:
            break
        else:
            original_list.append(elem)
    return original_list

def second_iter(second_list=first_iter()): # делаем вторую итерацию с дефолтным списоком
    count = 0
    for elem in cycle(second_list):
        if count > 10:
            break
        print(elem, end=' ')
        count += 1

second_iter()

"""Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. 
При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом: 
for el in fact(n). Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел,
начиная с 1! и до n!.
Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.
"""

def generator(number):
    for elem in range(1, number + 1):
        yield elem

for elem in generator(5):
    print(elem)
